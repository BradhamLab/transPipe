# system level imports
import os
import sys
import socket

# add scripts to python path for utilitiy functions
sys.path.append('../../scripts/python')
import utils

# load java module if on scc
if 'scc' in socket.gethostname():
    shell.prefix('module load java; set -eua pipefail; ')



configfile: '../../files/config.yaml'
config = utils.configure_run(config)

SAMPLE_DICT = utils.link_ids_to_input(config['dirs']['filter'],
                                      config['sample_regex']['id'],
                                      config['sample_regex']['replicate'])

SAMPLES = sorted(list(SAMPLE_DICT.keys()))
ENDS = sorted(list(config['dataset']['ends'].keys()))

# Create STAR genome folder if it does not already exist
if not os.path.exists(config['dirs']['genome']):
    os.makedirs(config['dirs']['genome'])

rule all:
    input:
        expand(os.path.join(config['dirs']['output'], 'alignments',
                              '{sample}Aligned.out.bam'),
               sample=SAMPLES)

# perform fastp quality control on corrected reads
rule fastp_qc:
    input:
        r1=os.path.join(config['dirs']['filter'],
                        '{sample}' + '_{}.fastq.gz'.format(ENDS[0])),
        r2=os.path.join(config['dirs']['filter'],
                        '{sample}' + '_{}.fastq.gz'.format(ENDS[1]))
    params:
        p1=config['params']['fastp']
    output:
        r1=temp(os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[0]))),
        r2=temp(os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[1]))),
        html=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                          'fastp.html'),
        json=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                          'fastp.json')
    shell:
        'source activate qc;'
        'fastp {params.p1} -i {input.r1} -I {input.r2} -o {output.r1} -O '
        '{output.r2} -h {output.html} -j {output.json}'


# Create genome index with STAR
rule star_generate_genome:
    input:
        gtf=config['files']['gtf'],
        fasta=config['files']['genome_fasta']
    params:
        read_length=(config['dataset']['read_length'] - 1),
        extra=utils.get_star_genome_params(config),
        log=os.path.join(config['dirs']['log'], 'star'),
        genome=config['dirs']['genome']
    output:
        utils.get_star_genome_files(config['dirs']['genome'])
    shell:
        'source activate alignment; STAR --runMode genomeGenerate '
        '--genomeDir {params.genome} --genomeFastaFiles {input.fasta} '
        '--sjdbGTFfile {input.gtf} --sjdbOverhang {params.read_length} '
        '--outFileNamePrefix {params.log} {params.extra}'


# Align reads to genome using STAR
rule star_align_reads:
    input:
        utils.get_star_genome_files(config['dirs']['genome']),
        r1=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[0])),
        r2=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[1]))
    params:
        prefix=os.path.join(config['dirs']['output'], 'filter_alignments',
                            '{sample}', '{sample}'),
        genome=config['dirs']['genome'],
        extra=config['params']['star_align']
    output:
        temp(os.path.join(config['dirs']['output'], 'filter_alignments',
                          '{sample}', '{sample}Aligned.out.bam'))
    shell:
        'source activate alignment; '
        'STAR --runMode alignReads --outSAMtype BAM Unsorted '
        '--readFilesCommand zcat --genomeDir {params.genome} '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {input.r1} {input.r2} {params.extra}'


# Extract mapped reads
rule filter_unmapped:
    input:
        bam=os.path.join(config['dirs']['output'], 'filter_alignments',
                         '{sample}', '{sample}Aligned.out.bam')
    output:
        bam=os.path.join(config['dirs']['output'], 'alignments',
                              '{sample}Aligned.out.bam')
    shell:
        'source activate alignment; samtools view -F4 {input.bam} > {output.bam}'
