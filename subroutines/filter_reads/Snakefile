# system level imports
import os
import sys

# add scripts to python path for utilitiy functions
sys.path.append('../../scripts/python')
import utils


configfile: '../../files/config.yaml'
config = utils.configure_run(config)

SAMPLE_DICT = utils.link_ids_to_input(config['dirs']['filter'],
                                      config['sample_regex']['id'],
                                      config['sample_regex']['replicate'])

SAMPLES = sorted(list(SAMPLE_DICT.keys()))
SAMPLES = SAMPLES[0]
ENDS = sorted(list(config['dataset']['ends'].keys()))

# Create STAR genome folder if it does not already exist
if not os.path.exists(config['dirs']['genome']):
    os.makedirs(config['dirs']['genome'])

rule all:
    input:
        expand(os.path.join(config['dirs']['output'], 'sorted_bams',
                            '{sample}_sorted.bam'),
               sample=SAMPLES)

# correct kmers 
rule correct_kmers:
    input:
        r1=os.path.join(config['dirs']['filter'],
                               '{sample}' + '_{}.fastq.gz'.format(ENDS[0])),
        r2=os.path.join(config['dirs']['filter'],
                               '{sample}' + '_{}.fastq.gz'.format(ENDS[1]))
    log:
        os.path.join(config['dirs']['log'], 'rCorrector', '{sample}.log')
    params:
        dir=os.path.join(config['dirs']['output'], 'corrected_kmers'),
        extra=config['params']['rcor']
    output:
        r1=temp(os.path.join(config['dirs']['output'], 'corrected_kmers',
                        '{sample}' + '_{}.cor.fq.gz'.format(ENDS[0]))),
        r2=temp(os.path.join(config['dirs']['output'], 'corrected_kmers',
                        '{sample}' + '_{}.cor.fq.gz'.format(ENDS[1])))
    shell:
        'source activate qc; '
        '(perl $CONDA_PREFIX"/bin/run_rcorrector.pl" -1 {input.r1} -2 {input.r2} '
        '-od {params.dir} {params.extra}) 2> {log}'


# filter uncorrectable kmers, remove 'cor' denoter in header
rule parse_corrected:
    input:
        r1=os.path.join(config['dirs']['output'], 'corrected_kmers',
                        '{sample}' + '_{}.cor.fq.gz'.format(ENDS[0])),
        r2=os.path.join(config['dirs']['output'], 'corrected_kmers',
                        '{sample}' + '_{}.cor.fq.gz'.format(ENDS[1]))
    log:
        os.path.join(config['dirs']['log'], 'ReadCorrection', '{sample}.log')
    output:
        r1=os.path.join(config['dirs']['output'], 'corrected_reads',
                        '{sample}' + '_{}.fastq.gz'.format(ENDS[0])),
        r2=os.path.join(config['dirs']['output'], 'corrected_reads',
                        '{sample}' + '_{}.fastq.gz'.format(ENDS[1]))
    script:
        "../../scripts/python/FilterUncorrectabledPEfastq.py"


# perform fastp quality control on corrected reads
rule fastp_qc:
    input:
        r1=os.path.join(config['dirs']['output'], 'corrected_reads',
                        '{sample}' + '_{}.fastq.gz'.format(ENDS[0])),
        r2=os.path.join(config['dirs']['output'], 'corrected_reads',
                        '{sample}' + '_{}.fastq.gz'.format(ENDS[1]))
    log:
        os.path.join(config['dirs']['log'], 'fastp', '{sample}.log')
    params:
        p1=config['params']['fastp']
    output:
        r1=temp(os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[0]))),
        r2=temp(os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[1]))),
        html=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                          'fastp.html'),
        json=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                          'fastp.json')
    shell:
        'source activate qc;'
        '(fastp {params.p1} -i {input.r1} -I {input.r2} -o {output.r1} -O '
        '{output.r2} -h {output.html} -j {output.json}) 2> {log}'


# Create genome index with STAR
rule star_generate_genome:
    input:
        gtf=config['files']['gtf'],
        fasta=config['files']['genome_fasta']
    params:
        read_length=(config['dataset']['read_length'] - 1),
        extra=utils.get_star_genome_params(config),
        log=os.path.join(config['dirs']['log'], 'star'),
        genome=config['dirs']['genome']
    log:
        os.path.join(config['dirs']['log'], 'star', 'star_genome.log')
    output:
        utils.get_star_genome_files(config['dirs']['genome'])
    shell:
        'source activate alignment; (STAR --runMode genomeGenerate '
        '--genomeDir {params.genome} --genomeFastaFiles {input.fasta} '
        '--sjdbGTFfile {input.gtf} --sjdbOverhang {params.read_length} '
        '--outFileNamePrefix {params.log} {params.extra}) 2> {log}'


# Align reads to genome using STAR
rule star_align_reads:
    input:
        utils.get_star_genome_files(config['dirs']['genome']),
        r1=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[0])),
        r2=os.path.join(config['dirs']['output'], 'filter_qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(ENDS[1]))
    params:
        prefix=os.path.join(config['dirs']['output'], 'star', 'alignments',
                            '{sample}', '{sample}'),
        genome=config['dirs']['genome'],
        extra=config['params']['star_align']
    log:
        os.path.join(config['dirs']['log'], 'star', '{sample}_star.log')
    output:
        temp(os.path.join(config['dirs']['output'], 'star', 'alignments', '{sample}',
                    '{sample}Aligned.out.bam'))
    shell:
        'source activate alignment; '
        '(STAR --runMode alignReads --outSAMtype BAM Unsorted '
        '--readFilesCommand zcat --genomeDir {params.genome} '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {input.r1} {input.r2} {params.extra}) 2> {log}'


# Extract mapped reads
rule filter_unmapped:
    input:
        bam=os.path.join(config['dirs']['output'], 'star', 'filter_alignments',
                         '{sample}', '{sample}Aligned.out.bam')
    log:
        os.path.join(config['dirs']['log'], 'map_filter' '{sample}_filter.log')
    output:
        bam=temp(os.path.join(config['dirs']['output'], 'filtered_bams',
                              '{sample}', '{sample}_mapped.bam'))
    shell:
        'source activate alignment; '
        '(samtools view -F4 {input.bam} > {output.bam}) 2> {log}'


# coordinate sort filtered alignments
rule sort_mapped:
    input:
        bam=os.path.join(config['dirs']['output'], 'filtered_bams',
                              '{sample}', '{sample}_mapped.bam')
    log:
        os.path.join(config['dirs']['log'], 'filter_sort', '{sample}_sort.log')
    output:
        bam=os.path.join(config['dirs']['output'], 'sorted_bams',
                         '{sample}_sorted.bam')
    shell:
        'source activate alignment;'
        '(samtools sort-o {output.bam} -O bam {input.bam}) 2> {log}'