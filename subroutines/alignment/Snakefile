import sys

from itertools import product 

# add scripts to python path for utility functions
sys.path.append('../../scripts/python')
import utils

configfile: '../../files/config.yaml'
config = utils.configure_run(config)

END_KEYS = sorted(list(config['dataset']['ends'].keys()))
DIRNAMES = utils.link_ids_to_input(config['dirs']['data'],
                                   config['sample_regex']['id'])
IDS = list(DIRNAMES.keys())

def get_qc_output(samples, reads):
    expected_output = []
    for s, r in product(samples, reads):
        expected_output.append(os.path.join(config['dirs']['output'], 'qc', s,
                                            '{0}_{1}_qc.fastq.gz'.format(s, r)))
    return expected_output

# sub-workflow ends in sorted bams.
rule all:
    input:
        expand(os.path.join(config['dirs']['output'], 'star', 'alignments',
                            '{sample}', '{sample}Aligned.out.bam'), sample=IDS)

# Run read quality control before alignment
subworkflow quality_control:
    workdir: "../qc"
    snakefile: "../qc/Snakefile"

# Align with star
rule star_generate_genome:
    input:
        gtf=config['files']['gtf'],
        fasta=config['files']['genome_fasta']
    params:
        read_length=(config['dataset']['read_length'] - 1),
        extra=utils.get_star_genome_params(config),
        log=os.path.join(config['dirs']['log'], 'star')
    log:
        os.path.join(config['dirs']['log'], 'star', 'star_genome.log')
    output:
        genome=protected(directory(os.path.join(config['dirs']['output'],
                                   config['dirs']['genome'])))
    shell:
        'source activate alignment; '
        'mkdir {output.genome}; (STAR --runMode genomeGenerate '
        '--genomeDir {output.genome} --genomeFastaFiles {input.fasta} '
        '--sjdbGTFfile {input.gtf} --sjdbOverhang {params.read_length} '
        '--outFileNamePrefix {params.log} {params.extra}) 2> {log}'

# align reads
rule star_align_reads:
    input:
        quality_control(get_qc_output(IDS, END_KEYS)),
        r1=os.path.join(config['dirs']['output'], 'qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(END_KEYS[0])),
        r2=os.path.join(config['dirs']['output'], 'qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(END_KEYS[1])),
        genome=os.path.join(config['dirs']['genome'])
    params:
        prefix=os.path.join(config['dirs']['output'], 'star', 'alignments',
                            '{sample}', '{sample}'),
        extra=config['params']['star_align']
    log:
        os.path.join(config['dirs']['log'], 'star', '{sample}',
                     'star_alignment.log')
    output:
        os.path.join(config['dirs']['output'], 'star', 'alignments',
                     '{sample}', '{sample}Aligned.out.bam')
    shell:
        'source activate alignment; '
        '(STAR --runMode alignReads --outSAMtype BAM Unsorted '
        '--readFilesCommand zcat --genomeDir {input.genome} '
        '--outFileNamePrefix {params.prefix} '
        '--readFilesIn {input.r1} {input.r2} {params.extra}) 2> {log}'